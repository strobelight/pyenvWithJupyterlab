#!/bin/bash

# possible subcommands
#   notebook (classic notebook)
#   lab  (opening a notebook from the main page acts differently)
SUBCOMMAND=notebook

#DEBUG_OPT="--debug"
DEBUG_OPT=""

if tty -s; then
    exec > >(tee /tmp/jupyter.log) 2>&1
else
    exec > /tmp/jupyter.log 2>&1
fi

export PS4='+ (\t) ${LINENO}: '
#set -x

echo "Args: $@"

export PYENV_ROOT=$HOME/.pyenv
export SHELL=/usr/local/bin/bash
PATH="$PATH:/usr/local/bin"
if command -v pyenv > /dev/null 2>&1; then
    PATH="$PATH:$PYENV_ROOT/shims:$HOME/bin"
    echo "Cwd: $(/bin/pwd)"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    VENV=$(pyenv local)
    LOCAL_PREFIX="$(pyenv prefix)"
    JUPYTER_PREFIX="$(pyenv prefix jupyter)"

    if [ "$LOCAL_PREFIX" = "$JUPYTER_PREFIX" -o "$LOCAL_PREFIX" != "${LOCAL_PREFIX%%-jupyter}" ]; then
        echo "should not already be in the jupyter environment"
        exit 1
    fi

    if [ -f .python-version ]; then
        echo "pyenv local: $VENV"
    else
        echo "pyenv doesn't appear to be established for this directory"
        exit 1
    fi
    echo "pyenv: ${VENV}"
    JP="$JUPYTER_PREFIX/bin/jupyter"
    echo "jupyter: $JP"

    # establish a jupyter env if not already present
    if ! pyenv shell ${VENV}-jupyter; then
        pyenv virtualenv ${VENV} ${VENV}-jupyter
        if [ ! -f requirements.txt ]; then
            pip freeze > requirements.txt
        fi
        pyenv local ${VENV}-jupyter
        pip install -r requirements.txt
        pip install ipykernel
    fi
    pyenv local ${VENV}-jupyter
    python -m ipykernel install --prefix="$JUPYTER_PREFIX" --name=${VENV} --display-name="${VENV} $(python -V)"
    pyenv local ${VENV}

    if ! tty -s; then
        nohup $JP $SUBCOMMAND $DEBUG_OPT --port=8888 --port-retries=0 --ServerApp.password_required=False &
    else
        $JP $SUBCOMMAND $DEBUG_OPT --port=8888 --port-retries=0 --ServerApp.password_required=False
    fi
else
    echo "pyenv doesn't appear to exist in $PATH"
    exit 1
fi
